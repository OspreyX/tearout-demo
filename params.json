{"name":"Tearout-demo","tagline":"Ongoing discovery into the best tearout methods ","body":"# OpenFin Tearouts Intro \r\n\r\nThe OpenFin Runtime makes it possible to 'tear out' elements from an \r\napplication and have them persist in windows on their own. The newly \r\ncreated tearout window becomes a child of the application it came from. \r\n\t\t\r\n\t\t\r\nWhen you decide you want to tear out an element, you will need to create \r\nan OpenFin window to receive the DOM element. This is done with a call to\r\nnew fin.desktop.Window. Because there is a cost to creating \r\na window, often applications will create a pool of pre-created, empty windows \r\nand leave them in a hidden state until needed. \r\nUnder the covers, when asked for a new window the OpenFin Javascript adapter \r\nwill call window.open and return a reference to the parent that is wrapped  \r\nin an OpenFin Window object. Being an OpenFin window means that the parent is \r\nable to make OpenFin API calls against it. For example, the parent window can\r\nmove, animate, show, hide, minimize, maximize, etc the created child window. \r\n\t\t\r\nThe actual dragging out of the element can be initiated in a number of ways. \r\nOne option (and the one demonstrated here) is to inject the element that is \r\nto be dragged out into a waiting destination tearout window on click. From here you can\r\nmove the new tearout programmatically. Another option is to use native HTML5 drag and \r\ndrop to determine where the drop location will be and on the drop event place \r\nthe tearout window. The only caveat to this method is that once the \r\nmouse leaves the bounds of the parent window you no longer are able to set \r\nevent.preventDefault() on a dragover event. Unfortunately Windows \r\nwill show the 'not-allowed' cursor even though for our purposes we really can drop \r\nanywhere. To mitigate this, you can move an OpenFin window, with opacity set to .01, programmatically\r\nto always be behind the mouse. In so doing you are able to have the correct cursor prompt. This is how our chat app handles tearouts. \r\n\r\n### Keep In Mind\r\nApplications such as our and d:code:it's MarketStack create a tearout experience without actually moving DOM from one one window to another. Before transferring DOM elements from one window to another, decide if this is the best experience for the user. \r\n\t\t\r\n###Whats Next?\r\nUpcomming examples:\r\n* How eventing is propagated between parent and tearout\r\n* How to integrate with Angular\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}